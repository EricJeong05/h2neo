#include <msp430.h>
#include <stdio.h>
//#include <stdlib.h>
#include "rotary_encoder.h"
#include "nokia5110.h"

extern unsigned short ps;		// Grab BIT4 and BIT5
extern unsigned short ns;
extern double value;


/********************************************************************************
 * Initialize ports and corresponding interrupts
 ********************************************************************************/
void RotEnc_Init()
{
	P1DIR |= TEST_LED1;						// P1.0 output
	P1OUT &= ~TEST_LED1;					// set P1.0 to OFF

	// P1.1 prob not necessary
	P1DIR &= ~BRD_BUTTON2;					// P1.1 input
	P1REN |= BRD_BUTTON2; 					// Enable pullup resistor of P1.1 (default: GND)
	P1OUT |= BRD_BUTTON2;					// Set pullup resistor to active (+3.3V) mode

	P1IE |= BRD_BUTTON2;					// P1.1 interrupt enabled
	P1IFG &= ~BRD_BUTTON2;					// P1.1 interrupt flag cleared

	// Make GPIO direction as input
	P1DIR &= ~CH_A;
	P1DIR &= ~CH_B;
	P2DIR &= ~RE_BUTTON;

	// Enable Pull Up Resistor
//	P1REN |= CH_A + CH_B;					// needed if no physical resistor present

	// Enable interrupt
	P1IE |= CH_A + CH_B;					// rotary encoder interrupt
	P1IFG &= ~CH_A;							// clear interrupt flag
	P1IFG &= ~CH_B;							// ^

	P2IE |= RE_BUTTON;						// button interrupt
	P2IFG &= ~RE_BUTTON;					// clear interrupt flag
}

void get_direction(void)
{
	ns = (P1IN>>4) & 0x3;					// Grab BIT4 and BIT5
	__delay_cycles(100000);					// dEbOuNcInG hEhEH
	unsigned short index = (ps<<0x2) | ns;	// make it 0b0000PSNS
	signed short temp = rot_enc_table[index];
	if (temp == 1) {
		prints("right. ");
	} else if (temp == -1) {
		prints("left. ");
	}
	_delay_cycles(20000);
	value += temp;
	ps = ns;
}

void display_value(double value)
{
	// TODO: display the current value on the display screen
	char buf[80];
//	gcvt(value, 5, buf);
//	prints(buf);

	sprintf(buf, "number: %f", value);
	puts(buf);
	prints(buf);
}


/*********************************************************************************
 *
 * Defined Interrupt Service Routines (ISRs)
 *
 *********************************************************************************/
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
	if (P1IFG & BIT1) {
		P1OUT ^= TEST_LED1;					// Toggle P1.0
		prints("hello! ");
		_delay_cycles(10000);
		P1IFG &= ~BRD_BUTTON2;				// P1.1 interrupt flag cleared
	}
	if ((P1IFG & BIT4) || (P1IFG & BIT5)) {
		P1OUT ^= TEST_LED1;					// Toggle P1.0
		prints("turned ");
		get_direction();
		P1IFG &= ~CH_A;						// clear interrupt flag
		P1IFG &= ~CH_B;						// clear interrupt flag
	}
}

#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{
	P1OUT ^= TEST_LED1;						// Toggle P1.0
	prints("button. ");
	_delay_cycles(10000);
	P2IFG &= ~RE_BUTTON;					// P2.7 interrupt flag cleared
}
