/*
 * Setup:
		+------------+
		|            | -- NC
		|       P2.4 | -- Push Button
		|            |
		|            |
		|       P1.5 | -- Encoder B
 		|       P1.4 | -- Encoder A
		+------------+
 */

#include <msp430.h> 
#include "nokia5110.h"
#include "rotary_encoder.h"

unsigned char isPrompting = 1;		// initially set to YES
unsigned char alarmTriggered = 0;
float desiredRate;

unsigned char rotKnobIFG;

/*
 * main.c
 */
int main(void) {
    WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer
    Clock_Init_1MHz();			// used for LCD
    SPI_Init();						// for LCD screen connection
	_delay_cycles(50000);

	LCD_Init();
	clearLCD();
	
	while (1) {
		// initial screen shows "Desired Flow Rate" prompt
		// Flow rate value should be displayed and the rotary encoder motion action should reflect on the screen
		if (isPrompting) {
			// Flow rate input detection (rotary encoder)
			desiredRate


			// LCD screen display
//			setCursor(0, 0);
//			prints("Desired");		// 7 characters				Desired
//			setCursor(0, 1);		//							flow rate:
//			prints("flow rate:");	// 10 characters
//
//			setCursor(30, 5);
//			prints(" 1.0");
//			setCursor(60, 5);
//			prints("mL/h");
		}
	}
}




/**

 * @author Little Piggy

 * This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

 * http://creativecommons.org/licenses/by-nc-sa/3.0/

 */



#include "rotary-encoder.h"



/**

 * Inicialization rotary encoder

 * enable internal pull-up resistor

 *

 * @return void

 */

void encoderInit(){



	P1OUT |= (ENCODER_A+ENCODER_B);	//enable pull-up resistor

	P1REN |= ENCODER_A+ENCODER_B;	//enable pull-up resistor

	P1IFG &= ~ENCODER_A;			//clear interupt flag

	P1IE |= ENCODER_A;				//enable interupt for encoder



	__enable_interrupt();

}



#pragma vector=PORT1_VECTOR

__interrupt void Port_1(void)

{

	if(P1IN & ENCODER_B){ //one step CCW

		stepCCW(); //call function for step CCW

	}else{ //one step CW

		stepCW(); //call function for step CW

	}



	P1IFG &= ~ENCODER_A;	//clear interupt flag

}

// ------------------------------------------------



#ifndef ENC_ROT_H_

#define ENC_ROT_H_



#include <msp430.h>



#define ENCODER_A BIT3 //rotary encoder pin A

#define ENCODER_B BIT5 //rotary encoder pin B

//pin C (usually in the middle) connect on ground



void encoderInit();



#endif // ENC_ROT_H_

//- ------------------------------------

/**

 * simple code for rotary encode and launchpad ti msp430

 * In turn one step CW toggle LED2.

 * In turn one step CCW toggle LED1.

 * I'm use this encoder https://www.sparkfun.com/products/9117

 *

 * Set interrupt on ENCODER_A. In interrupt check ENCODER_B and determinate rotation.

 *

 * @author Little Piggy

 * This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

 * http://creativecommons.org/licenses/by-nc-sa/3.0/

 */



#include <msp430.h>

#include "rotary-encoder.h"



#define LED1 BIT0

#define LED2 BIT6



/**

 * function call on CCW rotation, modify code but don't rename it!

 */

void stepCCW(){

	P1OUT ^= LED1; //toogle led1

}



/**

 * function call on CW rotation, modify code but don't rename it!

 */

void stepCW(){

	P1OUT ^= LED2; //toogle led2

}



int main(void) {

	WDTCTL = WDTPW + WDTHOLD;

	P1DIR |= LED1 + LED2;

	P1OUT &= ~(LED1 + LED2);



	encoderInit();



	_BIS_SR(LPM4_bits + GIE); //set low power mode 4



}
